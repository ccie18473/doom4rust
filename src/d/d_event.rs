#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

use super::*;

/////////////////////////////
// d_event.h
/////////////////////////////
//
// DESCRIPTION:
//
//

//
// Event handling.
//

// Input event types.
#[derive(Clone, Copy)]
pub enum evtype_t {
    ev_keydown,
    ev_keyup,
    ev_mouse,
    ev_joystick,
    ev_quit,
}

// Event structure.
#[derive(Clone, Copy)]
pub struct event_t {
    pub Type: evtype_t,

    // Event-related data that depends on the type of event:
    //
    // ev_keydown/ev_keyup:
    //    data1: Key code (from doomkeys.h) of the key that was
    //           pressed or released.
    //    data2: Ascii text of the character that was pressed,
    //           shifted appropriately (eg. '$' if 4 was pressed
    //           while shift was held).
    //
    // ev_mouse:
    //    data1: Bitfield of buttons currently held down.
    //           (bit 0 = left; bit 1 = right; bit 2 = middle).
    //    data2: X axis mouse movement (turn).
    //    data3: Y axis mouse movement (forward/backward).
    //
    // ev_joystick:
    //    data1: Bitfield of buttons currently pressed.
    //    data2: X axis mouse movement (turn).
    //    data3: Y axis mouse movement (forward/backward).
    //    data4: Third axis mouse movement (strafe).
    pub data1: i32,
    pub data2: i32,
    pub data3: i32,
    pub data4: i32,
}
impl event_t {
    pub fn new() -> Self {
        Self {
            Type: evtype_t::ev_quit,
            data1: 0,
            data2: 0,
            data3: 0,
            data4: 0,
        }
    }
}

//
// Button/action code definitions.
//
pub enum buttoncode_t {
    // Press "Fire".
    BT_ATTACK = 1,
    // Use button, to open doors, activate switches.
    BT_USE = 2,

    // Flag: game events, not really buttons.
    BT_SPECIAL = 128,
    BT_SPECIALMASK = 3,

    // Flag, weapon change pending.
    // If true, the next 3 bits hold weapon num.
    BT_CHANGE = 4,
    // The 3bit weapon mask and shift, convenience.
    BT_WEAPONMASK = (8 + 16 + 32),
    BT_WEAPONSHIFT = 5, // BUG was 3

    // Pause the game.
    BTS_PAUSE = 6, // BUG was 1
    // Save the game at each console.
    BTS_SAVEGAME = 7, // BUG was 2

    // Savegame slot numbers
    //  occupy the second byte of buttons.
    BTS_SAVEMASK = (4 + 8 + 16),
    BTS_SAVESHIFT = 8, // BUG was 2
}

// villsa [STRIFE] Strife specific buttons
// TODO - not finished
pub enum buttoncode2_t {
    // Player view look up
    BT2_LOOKUP = 1,
    // Player view look down
    BT2_LOOKDOWN = 2,
    // Center player's view
    BT2_CENTERVIEW = 4,
    // Use inventory item
    BT2_INVUSE = 8,
    // Drop inventory item
    BT2_INVDROP = 16,
    // Jump up and down
    BT2_JUMP = 32,
    // Use medkit
    BT2_HEALTH = 128,
}
/////////////////////////////
// d_event.c
/////////////////////////////
//
// DESCRIPTION: Event handling.
//
// Events are asynchronous inputs generally generated by the game user.
// Events can be discarded if no responder claims them
//

pub const MAXEVENTS: usize = 64;

/////////////////////////////
// d_items.h
/////////////////////////////
//
// DESCRIPTION:
//	Items: key cards, artifacts, weapon, ammunition.
//

// Weapon info: sprite frames, ammunition use.
pub struct weaponinfo_t {
    pub ammo: ammotype_t,
    pub upstate: i32,
    pub downstate: i32,
    pub readystate: i32,
    pub atkstate: i32,
    pub flashstate: i32,
}

//
// D_PostEvent
// Called by the I/O functions when input is detected
//
pub fn D_PostEvent(ev: *mut event_t) {}

// Read an event from the queue.

pub fn D_PopEvent() -> *mut event_t {
    return ptr::null_mut();
}
