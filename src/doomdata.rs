#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

/////////////////////////////
// doomdata.h
/////////////////////////////
//
// Map level types.
// The following data structures define the persistent format
// used in the lumps of the WAD files.
//

// Lump order in a map WAD: each map needs a couple of lumps
// to provide a complete scene geometry description.
pub enum MAPLEVEL {
    ML_LABEL,    // A separator, name, ExMx or MAPxx
    ML_THINGS,   // Monsters, items..
    ML_LINEDEFS, // LineDefs, from editing
    ML_SIDEDEFS, // SideDefs, from editing
    ML_VERTEXES, // Vertices, edited and BSP splits generated
    ML_SEGS,     // LineSegs, from LineDefs split by BSP
    ML_SSECTORS, // SubSectors, list of LineSegs
    ML_NODES,    // BSP nodes
    ML_SECTORS,  // Sectors, from editing
    ML_REJECT,   // LUT, sector-sector visibility
    ML_BLOCKMAP, // LUT, motion clipping, walls/grid element
}

// A single Vertex.
#[repr(C)]
pub struct mapvertex_t {
    pub x: i16,
    pub y: i16,
}

// A SideDef, defining the visual appearance of a wall,
// by setting textures and offsets.
#[repr(C)]
pub struct mapsidedef_t {
    pub textureoffset: i16,
    pub rowoffset: i16,
    pub toptexture: String,
    pub bottomtexture: String,
    pub midtexture: String,
    // Front sector, towards viewer.
    pub sector: i16,
}

// A LineDef, as used for editing, and as input
// to the BSP builder.
#[repr(C)]
pub struct maplinedef_t {
    pub v1: i16,
    pub v2: i16,
    pub flags: i16,
    pub special: i16,
    pub tag: i16,
    // sidenum[1] will be -1 if one sided
    pub sidenum: [i16; 2],
}

//
// LineDef attributes.
//

// Solid, is an obstacle.
pub const ML_BLOCKING: i32 = 1;

// Blocks monsters only.
pub const ML_BLOCKMONSTERS: i32 = 2;

// Backside will not be present at all
//  if not two sided.
pub const ML_TWOSIDED: i32 = 4;

// If a texture is pegged, the texture will have
// the end exposed to air held constant at the
// top or bottom of the texture (stairs or pulled
// down things) and will move with a height change
// of one of the neighbor sectors.
// Unpegged textures allways have the first row of
// the texture at the top pixel of the line for both
// top and bottom textures (use next to windows).

// upper texture unpegged
pub const ML_DONTPEGTOP: i32 = 8;

// lower texture unpegged
pub const ML_DONTPEGBOTTOM: i32 = 16;

// In AutoMap: don't map as two sided: IT'S A SECRET!
pub const ML_SECRET: i32 = 32;

// Sound rendering: don't let sound cross two of these.
pub const ML_SOUNDBLOCK: i32 = 64;

// Don't draw on the automap at all.
pub const ML_DONTDRAW: i32 = 128;

// Set if already seen, thus drawn in automap.
pub const ML_MAPPED: i32 = 256;

// Sector definition, from editing.
#[repr(C)]
pub struct mapsector_t {
    pub floorheight: i16,
    pub ceilingheight: i16,
    pub floorpic: String,
    pub ceilingpic: String,
    pub lightlevel: i16,
    pub special: i16,
    pub tag: i16,
}

// SubSector, as generated by BSP.
#[repr(C)]
pub struct mapsubsector_t {
    pub numsegs: i16,
    // Index of first one, segs are stored sequentially.
    pub firstseg: i16,
}

// LineSeg, generated by splitting LineDefs
// using partition lines selected by BSP builder.
#[repr(C)]
pub struct mapseg_t {
    pub v1: i16,
    pub v2: i16,
    pub angle: i16,
    pub linedef: i16,
    pub side: i16,
    pub offset: i16,
}

// BSP node structure.

// Indicate a leaf.
pub const NF_SUBSECTOR: i32 = 0x8000;

#[repr(C)]
pub struct mapnode_t {
    // Partition line from (x,y) to x+dx,y+dy)
    pub x: i16,
    pub y: i16,
    pub dx: i16,
    pub dy: i16,

    // Bounding box for each child,
    // clip against view frustum.
    //short		bbox[2][4];
    pub bbox: [[i16; 4]; 2],

    // If NF_SUBSECTOR its a subsector,
    // else it's a node of another subtree.
    pub children: [u16; 2],
}

// Thing definition, position, orientation and type,
// plus skill/visibility flags and attributes.
#[repr(C)]
pub struct mapthing_t {
    pub x: i16,
    pub y: i16,
    pub angle: i16,
    pub Type: i16,
    pub options: i16,
}
